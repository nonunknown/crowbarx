using System;
using System.IO;
using System.Xml;

namespace Crowbar
{
    static class VersionModule
    {
        public static void ConvertSettingsFile(string appSettingsPathFileName)
        {
            XmlDocument xmlDoc;
            xmlDoc = new XmlDocument();
            xmlDoc.Load(appSettingsPathFileName);
            bool fileIsChanged = false;
            if (ConvertVisibilityPrivateToHidden(xmlDoc))
            {
                fileIsChanged = true;
            }

            if (fileIsChanged)
            {
                string currentFolder;
                string settingsFileName;
                string backupSettingsFileName;

                // NOTE: "ChangeDirectory" to settings folder to avoid problems with longer filenames.
                currentFolder = My.MyProject.Computer.FileSystem.CurrentDirectory;
                My.MyProject.Computer.FileSystem.CurrentDirectory = Path.GetDirectoryName(appSettingsPathFileName);
                settingsFileName = Path.GetFileName(appSettingsPathFileName);
                backupSettingsFileName = Path.GetFileNameWithoutExtension(appSettingsPathFileName) + " [backup " + DateTime.Now.ToString("yyyy-MM-dd-HHmmss") + "]" + Path.GetExtension(appSettingsPathFileName);
                if (!File.Exists(backupSettingsFileName))
                {
                    My.MyProject.Computer.FileSystem.CopyFile(settingsFileName, backupSettingsFileName, false);
                }

                My.MyProject.Computer.FileSystem.CurrentDirectory = currentFolder;
                xmlDoc.Save(appSettingsPathFileName);
            }
        }

        #region Private Methods

        private static XmlElement CopyElementToName(XmlElement element, string tagName)
        {
            var newElement = element.OwnerDocument.CreateElement(tagName);
            for (int i = 0, loopTo = element.Attributes.Count - 1; i <= loopTo; i++)
                newElement.SetAttributeNode((XmlAttribute)element.Attributes[i].CloneNode(true));
            for (int i = 0, loopTo1 = element.ChildNodes.Count - 1; i <= loopTo1; i++)
                newElement.AppendChild(element.ChildNodes[i].CloneNode(true));
            return newElement;
        }

        private static void RenameNodes(XmlDocument xmlDoc, string oldName, string newName)
        {
            XmlNodeList xmlNodes;
            XmlNode parentNode;
            XmlElement newElement;
            xmlNodes = xmlDoc.SelectNodes(oldName);
            foreach (XmlNode anXmlNode in xmlNodes)
            {
                parentNode = anXmlNode.ParentNode;
                newElement = CopyElementToName((XmlElement)anXmlNode, newName);
                parentNode.RemoveChild(anXmlNode);
                parentNode.AppendChild(newElement);
            }
        }

        private static bool ConvertVisibilityPrivateToHidden(XmlDocument xmlDoc)
        {
            bool fileIsChanged = false;
            XmlNodeList xmlNodes;
            xmlNodes = xmlDoc.SelectNodes("//WorkshopItem/Visibility");
            foreach (XmlNode anXmlNode in xmlNodes)
            {
                if (anXmlNode.InnerText == "Private")
                {
                    anXmlNode.InnerText = "Hidden";
                    fileIsChanged = true;
                }
            }

            return fileIsChanged;
        }

        #endregion

    }
}